scalar Url
scalar Date
scalar NonNegativeInt

union SmartSearchResult = Hello | Book

# create the Root Query
type Query {
    allHellos: [Hello]
    oneHello: Hello
    books(author: String): [Book]
    booksByReleased(
        year: Int!
        printedEdition:Boolean): [Book]
    booksByReleased2(releasedHistory: ReleaseHistoryInput!): [Book]
    #   mobileAppFilter is the input argument and it can be null
    #   [mobileApp] is the return type and it's an array of MobileApp type
    mobileApps(mobileAppFilter: MobileAppFilter): [MobileApp]
    pets(petFilter: PetFilter): [Pet]
    smartSearch(keyword: String): [SmartSearchResult]
}

type Mutation {
    addHello(helloInput: HelloInput!): Int
    replaceHelloText(helloInput: HelloInput!): [Hello]
    #replaceHelloText2(number: Int!, newText: String!): [Hello]
    deleteHello(number: Int!): Int
}

# create the schema object
# this part is optional as long as the type name is Query or Mutation
#schema {
#    query: Query
#}